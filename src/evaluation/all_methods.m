function methods = all_methods()
  % Return a cell array of all methods.
  % 
  % Each method is a struct containing:
  %    method.name   = name of the method
  %    method.method = function that does training and testing
  %    method.args   = extra arguments to pass to that function.
  %
  % Each method is invoked as
  %    [y_tgt] = method.method(x_src, y_src, x_tgt, method.args{:})
  methods = {};
  
  if 1
    methods{end+1} = struct(...
      'name',     'Source SVM',...
      'method',   @predict_liblinear_cv,...
      'args',     {{}},...
      'preferred_preprocessing', {{'truncate,joint-std','joint-zscore','joint-std','zscore','std','none'}});
  end
  
  if 1
    methods{end+1} = struct(...
      'name',     'Source LR',...
      'method',   @predict_liblinear_cv,...
      'args',     {{'type',7}},...
      'preferred_preprocessing', {{'truncate,joint-std','joint-zscore','joint-std','zscore','std','none'}});
  end
  
  if 1
    methods{end+1} = struct(...
      'name',   'ABiB-SVM',...
      'method', @predict_abib,...
      'args',   {{}},...
      'preferred_preprocessing', {{'truncate,joint-std','joint-std','std','zscore','none'}});
  end
  
  if 1
    methods{end+1} = struct(...
      'name',   'ABiB-LR',...
      'method', @predict_abib,...
      'args',   {{'classifier_opts',{{'type',7}}}},...
      'preferred_preprocessing', {{'truncate,joint-std','joint-std','std','zscore','none'}});
  end
end
